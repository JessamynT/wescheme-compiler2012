#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 5.2 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 28 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 19 #"drscheme:sexp-snip\0"
0 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 33 #"(lib \"bullet-snip.ss\" \"browser\")\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 15 #"test-case-box%\0"
2 0 1 6 #"wxloc\0"
          0 0 58 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 10 #"Monospace\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 28
#"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 37
#"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 34 139 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 176 48 96 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 200 0 0 0 0 0 -1 -1 2 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 0 1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1           0 4849 0 26 3 21 #"#lang s-exp \"lang.ss\""
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 11 #"\"rbtree.ss\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 33 #"\"../collects/moby/runtime/stx.ss\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 7 #"require"
0 0 4 3 1 #" "
0 0 19 3 42 #"\"../collects/moby/runtime/error-struct.ss\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 34 3 5 #"cons?"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 101
(
 #";; A program is a (listof (or/c defn? expr? library-require? provide"
 #"-statement? require-permission?))"
) 0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"list?"
0 0 4 3 1 #" "
0 0 28 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 28 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 3 #"and"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 28 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 28 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 28 3 5 #"list?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 5 #"datum"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";; symbol<: symbol symbol -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 7 #"symbol<"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 8 #"string<?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 34 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";; expression<: expression expression -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";; Induces an ordering of expressions."
0 0 4 29 1 #"\n"
0 0 17 3 55 #";; Returns true if one expression is less than another."
0 0 4 29 1 #"\n"
0 0 17 3 81
(
 #";; FIXME: this is a partial function at the moment: it doesn't know "
 #"how to handle"
) 0 0 4 29 1 #"\n"
0 0 17 3 42 #";; +-inf.0, nan.0, or complex numbers yet."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 12 #"expression<?"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 22 #"expression-type-number"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 28 3 22 #"expression-type-number"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 22 #"expression-type-number"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 28 3 22 #"expression-type-number"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 34 3 7 #"number?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 17 3 52 #";; FIXME: bug here if x is not a finite real number."
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 34 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 34 3 7 #"string?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 34 3 8 #"string<?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 34 3 8 #"boolean?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 34 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 34 3 5 #"char?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 34 3 6 #"char<?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 28 3 7 #"symbol<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 28 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"[("
0 0 34 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 34 3 5 #"ormap"
0 0 4 3 1 #" "
0 0 28 3 12 #"expression<?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"y"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 34 3 5 #"false"
0 0 22 3 3 #"])]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 8 #"        "
0 0 34 3 5 #"false"
0 0 22 3 3 #"])]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 5 #"false"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";; expression-type-number: expression -> number"
0 0 4 29 1 #"\n"
0 0 17 3 85
(
 #";; Produces an arbitrary but consistent numbering on an expression b"
 #"ased on its type."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 22 #"expression-type-number"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 7 #"number?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"0"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 7 #"string?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"1"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 8 #"boolean?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"2"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 5 #"char?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"3"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"4"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"5"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 28 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 20 3 1 #"6"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";; program: any -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";; Returns true if the datum is a program."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 8 #"program?"
0 0 4 3 1 #" "
0 0 28 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"list?"
0 0 4 3 1 #" "
0 0 28 3 5 #"datum"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 6 #"andmap"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"("
0 0 34 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"defn?"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 28 3 11 #"expression?"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 28 3 16 #"library-require?"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 28 3 18 #"provide-statement?"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 22 3 1 #"("
0 0 28 3 19 #"require-permission?"
0 0 4 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 28 3 5 #"datum"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 30 #";; expression?: any -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; Returns true if the datum is an expression."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 11 #"expression?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-expr"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"defn?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-expr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 16 #"library-require?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-expr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 18 #"provide-statement?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-expr"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 19 #"require-permission?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-expr"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 24 #";; defn?: stx -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"defn?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"define"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 13 #"define-struct"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 13 #"define-values"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 4 #"true"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 5 #"false"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 37 #";; provide-statement?: stx -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";; Produces true if the syntax looks like a provide."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 18 #"provide-statement?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"provide"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 38 #";; require-permission?: stx -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 67
#";; Produces true if the syntax looks like a permission-requirement."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 19 #"require-permission?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 18 #"require-permission"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 48 #";; string-join: (listof string) string -> string"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 11 #"string-join"
0 0 4 3 1 #" "
0 0 28 3 4 #"strs"
0 0 4 3 1 #" "
0 0 28 3 5 #"delim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 28 3 4 #"strs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 19 3 2 #"\"\""
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 4 #"strs"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 4 #"strs"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 13 #"string-append"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 4 #"strs"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 28 3 5 #"delim"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 28 3 11 #"string-join"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 4 #"strs"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 28 3 5 #"delim"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 47 #";; string-split: string char -> (listof string)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 12 #"string-split"
0 0 4 3 1 #" "
0 0 28 3 5 #"a-str"
0 0 4 3 1 #" "
0 0 28 3 5 #"delim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 8 #"add-word"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 34 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 12 #"list->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 34 3 5 #"empty"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 20 #"accumulate-character"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 12 #"            "
0 0 22 3 1 #"("
0 0 34 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cons"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 34 3 7 #"reverse"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 28 3 8 #"add-word"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 5 #"foldl"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 2 #"ch"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 24 #"                        "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 34 3 6 #"char=?"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 4 3 1 #" "
0 0 28 3 5 #"delim"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 28 3 8 #"add-word"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 30 #"                              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 31 #"                               "
0 0 22 3 1 #"("
0 0 28 3 20 #"accumulate-character"
0 0 4 3 1 #" "
0 0 28 3 3 #"acc"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 34 3 4 #"list"
0 0 4 3 1 #" "
0 0 34 3 5 #"empty"
0 0 4 3 1 #" "
0 0 34 3 5 #"empty"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 22 #"                      "
0 0 22 3 1 #"("
0 0 34 3 12 #"string->list"
0 0 4 3 1 #" "
0 0 28 3 5 #"a-str"
0 0 22 3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 29 #";; test-case?: stx -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 10 #"test-case?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"check-expect"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"EXAMPLE"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 12 #"check-within"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 11 #"check-error"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 35 #";; library-require?: stx -> boolean"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 16 #"library-require?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 7 #"an-sexp"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 14 3 7 #"require"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; java-identifiers: (rbtreeof symbol boolean)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 16 #"java-identifiers"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 5 #"foldl"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 3 #"sym"
0 0 4 3 1 #" "
0 0 28 3 9 #"an-rbtree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 34 3 13 #"rbtree-insert"
0 0 4 3 1 #" "
0 0 28 3 7 #"symbol<"
0 0 4 3 1 #" "
0 0 28 3 9 #"an-rbtree"
0 0 4 3 1 #" "
0 0 28 3 3 #"sym"
0 0 4 3 1 #" "
0 0 34 3 4 #"true"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 34 3 12 #"empty-rbtree"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 34 3 1 #"'"
0 0 22 3 1 #"("
0 0 14 3 8 #"abstract"
0 0 4 3 2 #"  "
0 0 14 3 8 #"continue"
0 0 4 3 2 #"  "
0 1 4 65 1 #"\t"
0 0 15 3 3 #"for"
0 0 4 3 2 #"  "
0 1 4 65 1 #"\t"
0 0 14 3 3 #"new"
0 0 4 3 2 #"  "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"switch"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 6 #"assert"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 15 3 7 #"default"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 4 #"goto"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 7 #"package"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 12 #"synchronized"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 7 #"boolean"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 15 3 2 #"do"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 2 #"if"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 15 3 7 #"private"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 17 3 2 #"#;"
0 0 4 3 1 #" "
0 0 14 3 4 #"this"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 5 #"break"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"double"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 10 #"implements"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 9 #"protected"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 5 #"throw"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 4 #"byte"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"delete"
0 0 4 3 2 #"  "
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"import"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 15 3 6 #"public"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"throws"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 15 3 4 #"case"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 4 #"enum"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 10 #"instanceof"
0 0 4 3 1 #" "
0 0 14 3 10 #"instanceOf"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"return"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 9 #"transient"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 15 3 5 #"catch"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 7 #"extends"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 3 #"int"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 5 #"short"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 3 #"try"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 4 #"char"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 5 #"final"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 15 3 9 #"interface"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"static"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 4 #"void"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 15 3 5 #"class"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 7 #"finally"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 4 #"long"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 8 #"strictfp"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 8 #"volatile"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 5 #"const"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 5 #"float"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 6 #"native"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 5 #"super"
0 0 4 3 1 #" "
0 1 4 65 1 #"\t"
0 0 14 3 5 #"while"
0 0 4 3 1 #" "
0 0 14 3 4 #"null"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 7 #"comment"
0 0 4 3 1 #" "
0 0 14 3 6 #"export"
0 0 4 3 1 #" "
0 0 14 3 6 #"import"
0 0 4 3 1 #" "
0 0 14 3 2 #"in"
0 0 4 3 1 #" "
0 0 14 3 5 #"label"
0 0 4 3 1 #" "
0 0 14 3 6 #"typeof"
0 0 4 3 1 #" "
0 0 14 3 4 #"with"
0 0 4 3 1 #" "
0 0 14 3 5 #"false"
0 0 4 3 1 #" "
0 0 14 3 4 #"true"
0 0 4 29 1 #"\n"
0 0 4 3 21 #"                     "
0 0 14 3 8 #"debugger"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";; special-character-mappings: (rbtreeof char string)"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 26 #"special-character-mappings"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 5 #"foldl"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 14 #"ch+translation"
0 0 4 3 1 #" "
0 0 28 3 9 #"an-rbtree"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 34 3 13 #"rbtree-insert"
0 0 4 3 1 #" "
0 0 34 3 6 #"char<?"
0 0 4 3 1 #" "
0 0 28 3 9 #"an-rbtree"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 14 #"ch+translation"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 14 #"ch+translation"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 34 3 12 #"empty-rbtree"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 34 3 1 #"'"
0 0 22 3 2 #"(("
0 0 20 3 3 #"#\\-"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"_dash_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\_"
0 0 4 3 1 #" "
0 0 19 3 13 #"\"_underline_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\?"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"_question_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\!"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"_bang_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\."
0 0 4 3 1 #" "
0 0 19 3 7 #"\"_dot_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\:"
0 0 4 3 1 #" "
0 0 19 3 9 #"\"_colon_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\="
0 0 4 3 1 #" "
0 0 19 3 9 #"\"_equal_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\@"
0 0 4 3 1 #" "
0 0 19 3 6 #"\"_at_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\#"
0 0 4 3 1 #" "
0 0 19 3 9 #"\"_pound_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\$"
0 0 4 3 1 #" "
0 0 19 3 10 #"\"_dollar_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\%"
0 0 4 3 1 #" "
0 0 19 3 11 #"\"_percent_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\^"
0 0 4 3 1 #" "
0 0 19 3 9 #"\"_tilde_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\&"
0 0 4 3 1 #" "
0 0 19 3 7 #"\"_and_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\*"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"_star_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\+"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"_plus_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\/"
0 0 4 3 1 #" "
0 0 19 3 9 #"\"_slash_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\<"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"_lessthan_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\>"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"_greaterthan_\""
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 20 3 3 #"#\\~"
0 0 4 3 1 #" "
0 0 19 3 9 #"\"_tilde_\""
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; translate-special-character: char -> string"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; Special character mappings for identifiers."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 27 #"translate-special-character"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 5 #"cons?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"rbtree-lookup"
0 0 4 3 1 #" "
0 0 34 3 6 #"char<?"
0 0 4 3 1 #" "
0 0 28 3 26 #"special-character-mappings"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"rbtree-lookup"
0 0 4 3 1 #" "
0 0 34 3 6 #"char<?"
0 0 4 3 1 #" "
0 0 28 3 26 #"special-character-mappings"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 6 #"string"
0 0 4 3 1 #" "
0 0 28 3 2 #"ch"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 55 #";; identifier->munged-java-identifier: symbol -> symbol"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 34 #"identifier->munged-java-identifier"
0 0 4 3 1 #" "
0 0 28 3 5 #"an-id"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 5 #"cons?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"rbtree-lookup"
0 0 4 3 1 #" "
0 0 28 3 7 #"symbol<"
0 0 4 3 1 #" "
0 0 28 3 16 #"java-identifiers"
0 0 4 3 1 #" "
0 0 28 3 5 #"an-id"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 14 #"string->symbol"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 28 3 5 #"an-id"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"_\""
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 20 #"maybe-prepend-hyphen"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 2 #"[("
0 0 34 3 6 #"member"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 12 #"string->list"
0 0 4 3 1 #" "
0 0 19 3 12 #"\"0123456789\""
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cons"
0 0 4 3 1 #" "
0 0 20 3 3 #"#\\-"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 17 #"                 "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 18 #"                  "
0 0 28 3 5 #"chars"
0 0 22 3 3 #"]))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 20 #"maybe-prepend-hyphen"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 12 #"string->list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 28 3 5 #"an-id"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 17 #"translated-chunks"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 3 #"map"
0 0 4 3 1 #" "
0 0 28 3 27 #"translate-special-character"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 13 #"translated-id"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 14 #"string->symbol"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 28 3 11 #"string-join"
0 0 4 3 1 #" "
0 0 28 3 17 #"translated-chunks"
0 0 4 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 28 3 13 #"translated-id"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 58
#";; remove-leading-whitespace/list: (listof char) -> string"
0 0 4 29 1 #"\n"
0 0 17 3 56 #";; Removes leading whitespace from a list of characters."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 30 #"remove-leading-whitespace/list"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 19 3 2 #"\"\""
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"char-whitespace?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 28 3 30 #"remove-leading-whitespace/list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 12 #"list->string"
0 0 4 3 1 #" "
0 0 28 3 5 #"chars"
0 0 22 3 4 #")]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; remove-leading-whitespace: string -> string"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";; Removes the whitespace from the front of a string."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 25 #"remove-leading-whitespace"
0 0 4 3 1 #" "
0 0 28 3 5 #"a-str"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 28 3 30 #"remove-leading-whitespace/list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 12 #"string->list"
0 0 4 3 1 #" "
0 0 28 3 5 #"a-str"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 40 #";; take: (listof X) number -> (listof X)"
0 0 4 29 1 #"\n"
0 0 17 3 53 #";; Produces a list of the first n elmeents of a-list."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 4 #"take"
0 0 4 3 1 #" "
0 0 28 3 6 #"a-list"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 4 #"cons"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 6 #"a-list"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 11 #"           "
0 0 22 3 1 #"("
0 0 28 3 4 #"take"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 6 #"a-list"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 45 #";; list-tail: (listof X) number -> (listof X)"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";; Produces a list of the last n elmeents in a-list."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 9 #"list-tail"
0 0 4 3 1 #" "
0 0 28 3 6 #"a-list"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 28 3 6 #"a-list"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 28 3 9 #"list-tail"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 6 #"a-list"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 16 #"                "
0 0 22 3 1 #"("
0 0 34 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 26 #";; range: number -> number"
0 0 4 29 1 #"\n"
0 0 17 3 46 #";; Produces a list of the numbers [0, ..., n)."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"range"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 4 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 34 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 6 #"append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"range"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 34 3 4 #"list"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"sub1"
0 0 4 3 1 #" "
0 0 28 3 1 #"n"
0 0 22 3 6 #")))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 39 #";; stx-list-of-symbols?: stx -> boolean"
0 0 4 29 1 #"\n"
0 0 17 3 68
#";; Produces true if an-stx is a syntax containing a list of symbols."
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 20 #"stx-list-of-symbols?"
0 0 4 3 1 #" "
0 0 28 3 6 #"an-stx"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 9 #"stx:list?"
0 0 4 3 1 #" "
0 0 28 3 6 #"an-stx"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 6 #"andmap"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"lambda"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 3 #"elt"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 3 #"elt"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 6 #"an-stx"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 72
(
 #";; Helper to help with the destructuring and case analysis of functi"
 #"ons."
) 0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 23 #"case-analyze-definition"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 28 3 10 #"f-function"
0 0 4 3 13 #"             "
0 0 17 3 37 #";; (stx (listof stx) expr-stx) -> ..."
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 28 3 20 #"f-regular-definition"
0 0 4 3 3 #"   "
0 0 17 3 24 #";; (stx expr-stx) -> ..."
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 28 3 15 #"f-define-struct"
0 0 4 3 8 #"        "
0 0 17 3 31 #";; (stx (listof id-stx)) -> ..."
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 28 3 15 #"f-define-values"
0 0 4 3 8 #"        "
0 0 17 3 32 #";; ((listof id-stx) stx) -> ... "
0 0 4 29 1 #"\n"
0 0 4 3 33 #"                                 "
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 30 #";; (define (id args ...) body)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"define"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 28 3 20 #"stx-list-of-symbols?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 4 #"args"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 5 #")))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 28 3 22 #"check-single-body-stx!"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 28 3 10 #"f-function"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 28 3 4 #"args"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 39 #";; (define id (lambda (args ...) body))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"define"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 4 #"args"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 6 #")))))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 5 #"begin"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 28 3 22 #"check-single-body-stx!"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 5 #")))))"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 28 3 10 #"f-function"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 28 3 4 #"args"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 19 #";; (define id body)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"define"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"lambda"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 28 3 20 #"f-regular-definition"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 36 #";(define-struct id (fields ...))    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 13 #"define-struct"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 2 #"or"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"empty?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 28 3 5 #"pair?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 6 #"))))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 6 #"fields"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 28 3 15 #"f-define-struct"
0 0 4 3 1 #" "
0 0 28 3 2 #"id"
0 0 4 3 1 #" "
0 0 28 3 6 #"fields"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 32 #";; (define-values (id ...) body)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"and"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 13 #"define-values"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 10 #"          "
0 0 22 3 1 #"("
0 0 28 3 20 #"stx-list-of-symbols?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 4 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 3 #"ids"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #"))))"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 7 #"       "
0 0 22 3 1 #"("
0 0 28 3 15 #"f-define-values"
0 0 4 3 1 #" "
0 0 28 3 3 #"ids"
0 0 4 3 1 #" "
0 0 28 3 4 #"body"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 56 #";; FIXME: add more error productions as necessary to get"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 29 #";; reasonable error messages."
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 6 #"define"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 11 #"define-var?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 28 3 19 #"find-defn-var-error"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 9 #"         "
0 0 22 3 1 #"("
0 0 28 3 20 #"find-defn-func-error"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #"))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 13 #"define-struct"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 28 3 24 #"handle-defn-struct-error"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 25 #";(raise (make-moby-error "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 30 #";       (stx-loc a-definition)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 52 #";      (make-moby-error-type:generic-syntactic-error"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 136
(
 #";      \"define expects either an identifier and a body: (define ans"
 #"wer 42), or a function header and body: (define (double x ) (* x 2))"
 #"\""
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 16 #";     (list))))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 1 #";"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 48 #";[(stx-begins-with? a-definition 'define-struct)"
0 0 4 29 1 #"\n"
0 0 4 3 3 #"   "
0 0 17 3 3 #" ; "
0 0 17 3 1 #"("
0 0 17 3 5 #"raise"
0 0 17 3 1 #" "
0 0 17 3 16 #"(make-moby-error"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 10 #";         "
0 0 17 3 1 #"("
0 0 17 3 7 #"stx-loc"
0 0 17 3 1 #" "
0 0 17 3 13 #"a-definition)"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 2 #"; "
0 0 17 3 8 #"        "
0 0 17 3 45 #"(make-moby-error-type:generic-syntactic-error"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 3 #";  "
0 0 17 3 118
(
 #"        \"define-struct expects an identifier and a list of fields. "
 #" i.e. (define-struct pizza (dough sauce toppings))\""
) 0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 17 3 4 #";   "
0 0 17 3 7 #"       "
0 0 17 3 1 #"("
0 0 17 3 9 #"list))))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 16 #"stx-begins-with?"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 4 3 1 #" "
0 0 34 3 1 #"'"
0 0 15 3 13 #"define-values"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 13 #"             "
0 0 22 3 1 #"("
0 0 34 3 44 #"make-moby-error-type:generic-syntactic-error"
0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 19 3 86
(
 #"\"define-values expects a list of identifiers and a body.  i.e. (def"
 #"ine-values (x) 42)\""
) 0 0 4 29 1 #"\n"
0 0 4 3 14 #"              "
0 0 22 3 1 #"("
0 0 34 3 4 #"list"
0 0 22 3 5 #"))))]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 36 #";;define-var?: definition -> boolean"
0 0 4 29 1 #"\n"
0 8         264 4 2 #"(\0"
2 #")\0"
44 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"de"
7 #"wxtext\0"
3 1 #"f"
7 #"wxtext\0"
3 3 #"ine"
7 #"wxtext\0"
3 1 #" "
93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 2 #"(\0"
2 #")\0"
7 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"d"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 9 #"fine-var?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"and"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"list?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 7 #")))))))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 52 #";;find-first-non-symbol: (listof stx) -> non-symbol "
0 0 4 29 1 #"\n"
0 0 17 3 58
#";;called when we are certain there is a non symbol present"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 21 #"find-first-non-symbol"
0 0 4 3 1 #" "
0 0 28 3 3 #"los"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 3 #"los"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 3 #"los"
0 0 22 3 2 #")]"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 21 #"find-first-non-symbol"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 3 #"los"
0 0 22 3 5 #"))]))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 43 #";;find-defn-func-error: definition -> ?????"
0 0 4 29 1 #"\n"
0 8        2312 4 2 #"(\0"
2 #")\0"
461 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"defi"
7 #"wxtext\0"
3 1 #"n"
7 #"wxtext\0"
3 1 #"e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 20 #"find-defn-func-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"let"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"(("
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 4 #"    "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"cond"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 2 #"[("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"raise"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 15 #"make-moby-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 52 #"                                                    "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 12 #"make-Message"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"\"define\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 41 #"\": expected a variable but found nothing\""
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 2 #"[("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"0"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"       "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"raise"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 15 #"make-moby-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 31 #"                               "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 12 #"make-Message"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"\"define\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 56 #"\": expected a name for the function, but found nothing \""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"\"there\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 7 #"))))))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 2 #"[("
7 #"wxtext\0"
3 3 #"not"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 20 #"stx-list-of-symbols?"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
3 4 #"    "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"raise"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 15 #"make-moby-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 78
(
 #"                                                                    "
 #"          "
) 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 12 #"make-Message"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 79
(
 #"                                                                    "
 #"           "
) 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"\"define\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 79
(
 #"                                                                    "
 #"           "
) 7 #"wxtext\0"
3 34 #"\": expected a variable but found \""
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 79
(
 #"                                                                    "
 #"           "
) 7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 16 #"\"something else\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 21 #"find-first-non-symbol"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 9 #"))))))))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 2 #"[("
7 #"wxtext\0"
3 1 #"="
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"1"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 7 #"       "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"raise"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 15 #"make-moby-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 31 #"                               "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 12 #"make-Message"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"\"define\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 45 #"\": expected at least one variable after the \""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 15 #"\"function name\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"stx-e"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"second"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 5 #")))))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 32 #"                                "
7 #"wxtext\0"
3 18 #"\", but found none\""
7 #"wxtext\0"
3 4 #")))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 2 #"[("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"raise"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 15 #"make-moby-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 52 #"                                                    "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 12 #"make-Message"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"\"define\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 66
#"\": expected only one expression for the function body, but found \""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 14 #"make-MultiPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 13 #"string-append"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 14 #"number->string"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #"-"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 13 #"\" extra part\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 2 #"if"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 1 #">"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"4"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 3 #"\"s\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 2 #"\"\""
7 #"wxtext\0"
3 2 #"))"
7 #"wxtext\0"
3 2 #"  "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 3 #"map"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
11 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 4 #"rest"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 9 #"))))))))]"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 6 #"      "
7 #"wxtext\0"
3 2 #"[("
7 #"wxtext\0"
3 1 #"<"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 6 #"length"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"3"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"raise"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 15 #"make-moby-error"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 12 #"a-definition"
7 #"wxtext\0"
3 1 #")"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 52 #"                                                    "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 12 #"make-Message"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 16 #"make-ColoredPart"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 8 #"\"define\""
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 7 #"stx-loc"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 1 #"("
7 #"wxtext\0"
3 5 #"first"
7 #"wxtext\0"
3 1 #" "
7 #"wxtext\0"
3 5 #"parts"
7 #"wxtext\0"
3 3 #")))"
7 #"wxtext\0"
29 1 #"\n"
7 #"wxtext\0"
3 53 #"                                                     "
7 #"wxtext\0"
3 69
(
 #"\": expected an expression for the function body, but nothing's ther"
 #"e\""
) 7 #"wxtext\0"
3 7 #")))])))"
0 0 4 29 1 #"\n"
0 0 4 29 1 #"\n"
0 0 17 3 42 #";;find-defn-var-error: definition -> ?????"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 19 #"find-defn-var-error"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 28 3 5 #"parts"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 40 #"\": expected an variable name but found \""
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"something else\""
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 7 #"))))))]"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 1 #"<"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 51 #"\": expected an expression after the variable name \""
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 10 #"stx->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 22 #"\" but nothing's there\""
0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 8 #"\"define\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 57
#"\": expected only one expression after the variable name \""
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"symbol->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 10 #"stx->datum"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 14 #"\", but found \""
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 14 #"make-MultiPart"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"number->string"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 1 #"-"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 4 3 1 #" "
0 0 19 3 13 #"\" extra part\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 1 #">"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 4 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 22 3 2 #"))"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 69
(
 #"                                                                    "
 #" "
) 0 0 22 3 1 #"("
0 0 34 3 3 #"map"
0 0 4 3 1 #" "
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 12 #"))))))))])))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 47 #";;handle-defn-struct-error: definition -> ?????"
0 0 4 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 24 #"handle-defn-struct-error"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 29 1 #"\n"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 3 #"let"
0 0 4 3 1 #" "
0 0 22 3 2 #"(("
0 0 28 3 5 #"parts"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 4 #"    "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"define-struct\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 72
(
 #"\": expected the structure name after define-struct, but nothing's t"
 #"here\""
) 0 0 22 3 4 #")))]"
0 0 4 29 1 #"\n"
0 0 4 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"define-struct\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 12 #"\": expected "
0 0 19 3 52 #"the structure name after define-struct, but found \" "
0 0 19 29 1 #"\n"
0 0 19 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 19 3 20 #" \"something else\"   "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 7 #"))))))]"
0 0 19 3 49 #"                                                 "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 1 #"="
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"2"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"define-struct\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 65
#"\": expected at least one field name (in parentheses) after the  \""
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"structure name\""
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 23 #"\", but nothing's there\""
0 0 22 3 4 #")))]"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 5 #"list?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 4 #"))))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"define-struct\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 65
#"\": expected at least one field name (in parentheses) after the  \""
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"structure name\""
0 0 4 3 3 #"   "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"second"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 14 #"\", but found \""
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"something else\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 7 #"))))))]"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 20 #"stx-list-of-symbols?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"define-struct\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 37 #"\": expected a field name, but found \""
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 16 #"\"something else\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 21 #"find-first-non-symbol"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 9 #"))))))))]"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 2 #"[("
0 0 34 3 1 #">"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 28 3 12 #"a-definition"
0 0 22 3 1 #")"
0 0 4 3 2 #"  "
0 0 4 29 1 #"\n"
0 0 4 3 52 #"                                                    "
0 0 22 3 1 #"("
0 0 34 3 12 #"make-Message"
0 0 4 3 1 #" "
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 4 3 1 #" "
0 0 19 3 15 #"\"define-struct\""
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 4 29 1 #"\n"
0 0 4 3 53 #"                                                     "
0 0 19 3 32 #"\": expected nothing after the \" "
0 0 19 29 1 #"\n"
0 0 19 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 16 #"make-ColoredPart"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"string-append"
0 0 4 3 1 #" "
0 0 19 3 13 #"\"field name\" "
0 0 22 3 1 #"("
0 0 34 3 2 #"if"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 1 #">"
0 0 4 3 1 #" "
0 0 20 3 1 #"1"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 4 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 4 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 4 #"))))"
0 0 4 3 1 #" "
0 0 19 3 3 #"\"s\""
0 0 4 3 1 #" "
0 0 19 3 2 #"\"\""
0 0 22 3 2 #"))"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"third"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 54 #"                                                     \""
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"but"
0 0 19 3 6 #" found"
0 0 19 3 2 #" \""
0 0 19 29 1 #"\n"
0 0 19 3 53 #"                                                     "
0 0 22 3 1 #"("
0 0 34 3 14 #"make-MultiPart"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 13 #"string-append"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 14 #"number->string"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 1 #"-"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"3"
0 0 22 3 2 #"))"
0 0 19 3 3 #" \" "
0 0 19 3 5 #"extra"
0 0 19 3 5 #" part"
0 0 19 3 2 #"\" "
0 0 22 3 1 #"("
0 0 34 3 2 #"if"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 1 #">"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"length"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 1 #")"
0 0 19 3 1 #" "
0 0 20 3 1 #"4"
0 0 22 3 1 #")"
0 0 19 3 3 #" \"s"
0 0 19 3 4 #"\" \"\""
0 0 22 3 2 #"))"
0 0 19 3 2 #"  "
0 0 19 29 1 #"\n"
0 0 19 3 69
(
 #"                                                                    "
 #" "
) 0 0 22 3 1 #"("
0 0 34 3 3 #"map"
0 0 19 3 1 #" "
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 19 3 1 #" "
0 0 28 3 5 #"parts"
0 0 22 3 12 #"))))))))])))"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 30 #";; symbol-stx?: any -> boolean"
0 0 19 29 1 #"\n"
0 0 17 3 50 #";; Produces true when x is a symbol syntax object."
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 11 #"symbol-stx?"
0 0 19 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 3 #"and"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"stx?"
0 0 19 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 7 #"       "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 28 3 1 #"x"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 53 #";; check-duplicate-identifiers!: (listof stx) -> void"
0 0 19 29 1 #"\n"
0 0 17 3 56 #";; Return a list of the identifiers that are duplicated."
0 0 19 29 1 #"\n"
0 0 17 3 74
(
 #";; Also check to see that each of the ids is really a symbolic ident"
 #"ifier."
) 0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 28 #"check-duplicate-identifiers!"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 19 3 1 #" "
0 0 22 3 2 #"[("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 28 3 8 #"seen-ids"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 9 #"make-hash"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 19 29 1 #"\n"
0 0 19 3 10 #"          "
0 0 22 3 1 #"("
0 0 15 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 4 #"loop"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 12 #"            "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 4 #"void"
0 0 22 3 2 #")]"
0 0 19 29 1 #"\n"
0 0 19 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 19 3 1 #" "
0 0 22 3 2 #"[("
0 0 34 3 4 #"stx?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 8 #"hash-ref"
0 0 19 3 1 #" "
0 0 28 3 8 #"seen-ids"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                                              "
0 0 22 3 1 #"("
0 0 34 3 41 #"make-moby-error-type:duplicate-identifier"
0 0 19 29 1 #"\n"
0 0 19 3 47 #"                                               "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 47 #"                                               "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 8 #"hash-ref"
0 0 19 3 1 #" "
0 0 28 3 8 #"seen-ids"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 20 3 2 #"#f"
0 0 22 3 6 #")))))]"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                     "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 4 #"))))"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 46 #"                                              "
0 0 22 3 1 #"("
0 0 34 3 40 #"make-moby-error-type:expected-identifier"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 5 #"))))]"
0 0 19 29 1 #"\n"
0 0 19 3 21 #"                     "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 19 29 1 #"\n"
0 0 19 3 22 #"                      "
0 0 22 3 1 #"("
0 0 34 3 5 #"begin"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                        "
0 0 22 3 1 #"("
0 0 34 3 9 #"hash-set!"
0 0 19 3 1 #" "
0 0 28 3 8 #"seen-ids"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"stx-e"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 2 #"))"
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                        "
0 0 22 3 1 #"("
0 0 28 3 4 #"loop"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 9 #")))])]))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 1 #"("
0 0 28 3 4 #"loop"
0 0 19 3 1 #" "
0 0 28 3 3 #"ids"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 19 29 1 #"\n"
0 0 17 3 51 #";; check-single-body-stx!: (listof stx) stx -> void"
0 0 19 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 22 #"check-single-body-stx!"
0 0 19 3 1 #" "
0 0 28 3 4 #"stxs"
0 0 19 3 1 #" "
0 0 28 3 12 #"original-stx"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 19 3 1 #" "
0 0 28 3 4 #"stxs"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 28 3 12 #"original-stx"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                       "
0 0 22 3 1 #"("
0 0 34 3 44 #"make-moby-error-type:generic-syntactic-error"
0 0 19 29 1 #"\n"
0 0 19 3 25 #"                        \""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"single"
0 0 19 3 1 #" "
0 0 19 3 4 #"body"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"this"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"but"
0 0 19 3 1 #" "
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 4 #"didn"
0 0 19 3 1 #"'"
0 0 19 3 1 #"t"
0 0 19 3 1 #" "
0 0 19 3 4 #"find"
0 0 19 3 5 #" any."
0 0 19 3 1 #"\""
0 0 19 29 1 #"\n"
0 0 19 3 24 #"                        "
0 0 22 3 1 #"("
0 0 34 3 4 #"list"
0 0 22 3 5 #"))))]"
0 0 19 29 1 #"\n"
0 0 19 3 4 #"    "
0 0 22 3 2 #"[("
0 0 34 3 3 #"not"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"empty?"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 19 3 1 #" "
0 0 28 3 4 #"stxs"
0 0 22 3 3 #")))"
0 0 19 29 1 #"\n"
0 0 19 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 5 #"raise"
0 0 19 29 1 #"\n"
0 0 19 3 6 #"      "
0 0 22 3 1 #"("
0 0 34 3 15 #"make-moby-error"
0 0 19 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"stx-loc"
0 0 19 3 1 #" "
0 0 28 3 12 #"original-stx"
0 0 22 3 1 #")"
0 0 19 29 1 #"\n"
0 0 19 3 23 #"                       "
0 0 22 3 1 #"("
0 0 34 3 44 #"make-moby-error-type:generic-syntactic-error"
0 0 19 29 1 #"\n"
0 0 19 3 25 #"                        \""
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 8 #"expected"
0 0 19 3 1 #" "
0 0 19 3 1 #"a"
0 0 19 3 1 #" "
0 0 19 3 6 #"single"
0 0 19 3 1 #" "
0 0 19 3 4 #"body"
0 0 19 3 1 #" "
0 0 19 3 2 #"in"
0 0 19 3 1 #" "
0 0 19 3 4 #"this"
0 0 19 3 1 #" "
0 0 19 3 10 #"expression"
0 0 19 3 1 #","
0 0 19 3 1 #" "
0 0 19 3 3 #"but"
0 0 19 3 1 #" "
0 0 19 3 1 #"I"
0 0 19 3 1 #" "
0 0 19 3 5 #"found"
0 0 19 3 1 #" "
0 0 19 3 4 #"more"
0 0 19 3 1 #" "
0 0 19 3 4 #"than"
0 0 19 3 1 #" "
0 0 19 3 5 #"one.\""
0 0 24 29 1 #"\n"
0 0 24 3 24 #"                        "
0 0 22 3 1 #"("
0 0 34 3 3 #"map"
0 0 24 3 1 #" "
0 0 34 3 7 #"stx-loc"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 24 3 1 #" "
0 0 28 3 4 #"stxs"
0 0 22 3 6 #")))))]"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 5 #"     "
0 0 22 3 1 #"("
0 0 34 3 4 #"void"
0 0 22 3 4 #")]))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 17 3 49 #";; mapi: (X number -> Y) (listof X) -> (listof Y)"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 4 #"mapi"
0 0 24 3 1 #" "
0 0 28 3 1 #"f"
0 0 24 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 2 #"  "
0 0 22 3 1 #"("
0 0 34 3 5 #"local"
0 0 24 3 1 #" "
0 0 22 3 2 #"(["
0 0 15 3 6 #"define"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 4 #"loop"
0 0 24 3 1 #" "
0 0 28 3 3 #"lst"
0 0 24 3 1 #" "
0 0 28 3 1 #"i"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 24 29 1 #"\n"
0 0 24 3 12 #"            "
0 0 22 3 1 #"("
0 0 34 3 4 #"cond"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 22 3 2 #"[("
0 0 34 3 6 #"empty?"
0 0 24 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 34 3 5 #"empty"
0 0 22 3 1 #"]"
0 0 24 29 1 #"\n"
0 0 24 3 14 #"              "
0 0 22 3 1 #"["
0 0 14 3 4 #"else"
0 0 24 29 1 #"\n"
0 0 24 3 15 #"               "
0 0 22 3 1 #"("
0 0 34 3 4 #"cons"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 1 #"f"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"first"
0 0 24 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 28 3 1 #"i"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 21 #"                     "
0 0 22 3 1 #"("
0 0 28 3 4 #"loop"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"rest"
0 0 24 3 1 #" "
0 0 28 3 3 #"lst"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"add1"
0 0 24 3 1 #" "
0 0 28 3 1 #"i"
0 0 22 3 7 #")))])])"
0 0 24 29 1 #"\n"
0 0 24 3 4 #"    "
0 0 22 3 1 #"("
0 0 28 3 4 #"loop"
0 0 24 3 1 #" "
0 0 28 3 3 #"lst"
0 0 24 3 1 #" "
0 0 20 3 1 #"0"
0 0 22 3 3 #")))"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 24 29 1 #"\n"
0 0 22 3 1 #"("
0 0 34 3 16 #"provide/contract"
0 0 24 3 1 #" "
0 0 22 3 1 #"["
0 0 28 3 7 #"symbol<"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 34 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 4 #"mapi"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 34 3 7 #"number?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 8 #"program?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 11 #"expression?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 5 #"defn?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 10 #"test-case?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 19 #"require-permission?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 16 #"library-require?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 18 #"provide-statement?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 4 #"take"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 34 3 7 #"number?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 9 #"list-tail"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 34 3 7 #"number?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 22 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 12 #"expression<?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 28 3 11 #"expression?"
0 0 24 3 1 #" "
0 0 28 3 11 #"expression?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 8 #"boolean?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 25 #"remove-leading-whitespace"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"string?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 7 #"string?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 34 #"identifier->munged-java-identifier"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"symbol?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 7 #"symbol?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 5 #"range"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"number?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 7 #"number?"
0 0 22 3 3 #"))]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 28 #"check-duplicate-identifiers!"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 4 #"stx?"
0 0 22 3 1 #")"
0 0 24 3 2 #"  "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 22 #"check-single-body-stx!"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 4 #"stx?"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 34 3 4 #"stx?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 23 #"case-analyze-definition"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 4 #"stx?"
0 0 24 3 1 #" "
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 28 3 11 #"symbol-stx?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 28 3 11 #"symbol-stx?"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 34 3 4 #"stx?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 28 3 11 #"symbol-stx?"
0 0 24 3 1 #" "
0 0 34 3 5 #"any/c"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 22 3 1 #"("
0 0 28 3 11 #"symbol-stx?"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 28 3 11 #"symbol-stx?"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 22 3 2 #"(("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 28 3 11 #"symbol-stx?"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 34 3 4 #"stx?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 1 #")"
0 0 24 29 1 #"\n"
0 0 24 3 44 #"                                            "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 14 3 3 #"any"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 11 #"string-join"
0 0 24 3 1 #" "
0 0 22 3 2 #"(("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 7 #"string?"
0 0 22 3 1 #")"
0 0 24 3 1 #" "
0 0 34 3 7 #"string?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 7 #"string?"
0 0 22 3 2 #")]"
0 0 24 29 1 #"\n"
0 0 24 3 18 #"                  "
0 0 22 3 1 #"["
0 0 28 3 12 #"string-split"
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 7 #"string?"
0 0 24 3 1 #" "
0 0 34 3 5 #"char?"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 34 3 2 #"->"
0 0 24 3 1 #" "
0 0 26 3 1 #"."
0 0 24 3 1 #" "
0 0 22 3 1 #"("
0 0 34 3 6 #"listof"
0 0 24 3 1 #" "
0 0 34 3 7 #"string?"
0 0 22 3 4 #"))])"
0           0
